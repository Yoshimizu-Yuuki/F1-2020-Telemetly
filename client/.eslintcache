[{"/mnt/d/Documents/F1-2020-Telemetly/client/src/index.tsx":"1","/mnt/d/Documents/F1-2020-Telemetly/client/src/reportWebVitals.ts":"2","/mnt/d/Documents/F1-2020-Telemetly/client/src/App.tsx":"3","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/SettingTable.tsx":"4","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/BattleTelemetry.tsx":"5","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/TimeTable.tsx":"6","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/Live.tsx":"7"},{"size":501,"mtime":1607395984490,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607395984578,"results":"10","hashOfConfig":"9"},{"size":917,"mtime":1607597974616,"results":"11","hashOfConfig":"9"},{"size":4049,"mtime":1607395984539,"results":"12","hashOfConfig":"9"},{"size":5718,"mtime":1607403428025,"results":"13","hashOfConfig":"9"},{"size":3014,"mtime":1607408611209,"results":"14","hashOfConfig":"9"},{"size":407,"mtime":1607600288389,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"q4usyu",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/d/Documents/F1-2020-Telemetly/client/src/index.tsx",[],["32","33"],"/mnt/d/Documents/F1-2020-Telemetly/client/src/reportWebVitals.ts",[],"/mnt/d/Documents/F1-2020-Telemetly/client/src/App.tsx",["34"],"/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/SettingTable.tsx",[],"/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/BattleTelemetry.tsx",["35","36"],"import React, { useEffect, useState } from \"react\";\nimport BattleTelemetryResponse from \"./../../../server/src/F12020-Telemetly/response/BattleTelemetry\";\nimport \"./BattleTelemetry.scss\";\n\nfunction BattleTelemetry() {\n  let init: Array<BattleTelemetryResponse> = [{}];\n  const [battleTelemetryData, setBattleTelemetryData] = useState(init);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    const instance = setInterval(() => {\n      fetch(\"http://127.0.0.1:3020/battletelemetry\", {\n        method: \"GET\"\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(\"Success:\", data);\n          setBattleTelemetryData(data.battletelemetry);\n        })\n        .catch((error) => {\n          console.error(\"Error:\", error);\n        });\n    }, 300);\n\n    return () => {\n      clearInterval(instance);\n    };\n  });\n\n  return (\n    <div className='container'>\n      {battleTelemetryData.map((el) => {\n        return (\n          <div className=\"driver-container\">\n            <div className='speedmeter-container'>\n              <div className='speedmeter'>\n                <span className='drs'>{el.drs ? \"DRS\" : \"\"}</span>\n                <span className='speed'>{el.speed ? el.speed : \"-\"}</span>\n                <span className='gear'>{el.gear ? el.gear : \"\"}</span>\n                <span className='ers'>\n                  ERS:\n                  {el.ersStoreEnergy\n                    ? Math.round(el.ersStoreEnergy / 40000)\n                    : \"-\"}\n                  %\n                </span>\n              </div>\n            </div>\n            <div className='tyreinfo-container'>\n              <span className='tyre'>\n                {el.visualTyreCompound ? el.visualTyreCompound : \"UNKNOWN\"}\n              </span>\n              <span className='tyrelap'>\n                {el.tyresAgeLaps ? el.tyresAgeLaps + \"Lap ago\" : \"No data\"}\n              </span>\n              <div className='tyredamage-container'>\n                <span\n                  className='fl'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[2] : 0))+\",100%,50%)\"\n                    }  }\n                >\n                  {el.tyresDamage ? el.tyresDamage[2] : \"-\"}\n                </span>\n                <span\n                  className='fr'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[3] : 0))+\",100%,50%)\"\n                  }}\n                >\n                  {el.tyresDamage ? el.tyresDamage[3] : \"-\"}\n                </span>\n                <span\n                  className='rl'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[0] : 0))+\",100%,50%)\"\n                  }}\n                >\n                  {el.tyresDamage ? el.tyresDamage[0] : \"-\"}\n                </span>\n                <span\n                  className='rr'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[1] : 0))+\",100%,50%)\"\n                  }}\n                >\n                  {el.tyresDamage ? el.tyresDamage[1] : \"-\"}\n                </span>\n              </div>\n            </div>\n            <div className='driverinfo-container'>\n              <div className='position'>\n                {el.carPosition ? el.carPosition : \"-\"}\n              </div>\n              <div className={'team'+\" \" + el.teamName}>\n                {el.teamName ? el.teamName : \"UNKNOWN TEAM\"}\n              </div>\n\n              <div className='driver'>\n                <div className='carnumber'>\n                  {el.carNumber ? el.carNumber : \"-\"}\n                </div>\n                {el.driverName ? el.driverName : \"UNKNOWN DRIVER\"}\n              </div>\n              <div className='lastlap'>\n                {el.lastLapTime\n                  ? \"LASTLAP \" +\n                    (Math.floor(el.lastLapTime / 60) % 60) +\n                    \":\" +\n                    ( '00' + Math.floor(el.lastLapTime % 60)).slice(-2) +\n                    \":\" +\n                    ( '000' + Math.floor((el.lastLapTime * 1000) % 1000)).slice(-3)\n                  : \"LASTLAP NODATA\"}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      <div className='lapinfo-container'>\n        <div>\n          LAP{\" \"}\n          {battleTelemetryData[0]\n            ? battleTelemetryData[0].currentLapNumber\n            : \"-\"}\n          /\n          {battleTelemetryData[0]\n            ? battleTelemetryData[0].sessionFullLapNumber\n            : \"-\"}\n        </div>\n      </div>\n      <div className='distance-container'>\n        <div>DISTANCE</div>\n        <div>\n          {battleTelemetryData[1] && battleTelemetryData[1].distance\n            ? battleTelemetryData[1].distance / 1000\n            : \"+/-\"}\n        </div>\n      </div>\n      <div className='drszone-container'>\n        <div>DRSZone</div>\n        <div>\n          {battleTelemetryData[1] &&\n          battleTelemetryData[1].drsActivationDistance\n            ? Math.round(battleTelemetryData[1].drsActivationDistance)\n            : \"+/-\"}\n          m\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getDeltaTime(distance: number, speed: number): number {\n  // 現在の車速 / 3,600,000 = 1秒間に何m進むか[y]\n  // Distance m / y = 追いつくまでの秒数。\n  // 追いつくまでの秒数　×　1秒間に進む距離 = 離れている距離\n  const minuteMeter = (speed ? speed : 1) / 3600000;\n  const distanceMinute = distance / minuteMeter;\n  return Math.floor(distanceMinute / 1000) / 1000;\n  // return distanceMinute;\n}\n\nexport default BattleTelemetry;\n","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/TimeTable.tsx",[],"/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/Live.tsx",["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":6,"column":5,"nodeType":"45","messageId":"46","endLine":6,"endColumn":9},{"ruleId":"47","severity":1,"message":"48","line":95,"column":37,"nodeType":"49","messageId":"50","endLine":95,"endColumn":38},{"ruleId":"43","severity":1,"message":"51","line":153,"column":10,"nodeType":"45","messageId":"46","endLine":153,"endColumn":22},{"ruleId":"43","severity":1,"message":"52","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":26},{"ruleId":"43","severity":1,"message":"53","line":1,"column":28,"nodeType":"45","messageId":"46","endLine":1,"endColumn":36},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'getDeltaTime' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]