[{"/mnt/d/Documents/F1-2020-Telemetly/client/src/index.tsx":"1","/mnt/d/Documents/F1-2020-Telemetly/client/src/reportWebVitals.ts":"2","/mnt/d/Documents/F1-2020-Telemetly/client/src/App.tsx":"3","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/SettingTable.tsx":"4","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/BattleTelemetry.tsx":"5","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/TimeTable.tsx":"6","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/Live.tsx":"7"},{"size":501,"mtime":1607688009245,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607395984578,"results":"10","hashOfConfig":"9"},{"size":917,"mtime":1607597974616,"results":"11","hashOfConfig":"9"},{"size":4049,"mtime":1607395984539,"results":"12","hashOfConfig":"9"},{"size":5718,"mtime":1607403428025,"results":"13","hashOfConfig":"9"},{"size":3014,"mtime":1607408611209,"results":"14","hashOfConfig":"9"},{"size":4120,"mtime":1607700471105,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"q4usyu",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/mnt/d/Documents/F1-2020-Telemetly/client/src/index.tsx",[],["35","36"],"/mnt/d/Documents/F1-2020-Telemetly/client/src/reportWebVitals.ts",[],"/mnt/d/Documents/F1-2020-Telemetly/client/src/App.tsx",["37"],"import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\n  import TimeTable from \"./pages/TimeTable\";\n  import SettingTable from \"./pages/SettingTable\"\n  import BattleTelemetry from \"./pages/BattleTelemetry\"\n  import Live from \"./pages/Live\"\n\n  export default function App() {\n    return (\n      <Router>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/timetable\">\n              <TimeTable />\n            </Route>\n            <Route path=\"/setting\">\n              <SettingTable />\n            </Route>\n            <Route path=\"/battle\">\n              <BattleTelemetry />\n            </Route>\n            <Route path=\"/live\">\n              <Live />\n            </Route>\n          </Switch>\n      </Router>\n    );\n  }","/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/SettingTable.tsx",[],"/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/BattleTelemetry.tsx",["38","39"],"import React, { useEffect, useState } from \"react\";\nimport BattleTelemetryResponse from \"./../../../server/src/F12020-Telemetly/response/BattleTelemetry\";\nimport \"./BattleTelemetry.scss\";\n\nfunction BattleTelemetry() {\n  let init: Array<BattleTelemetryResponse> = [{}];\n  const [battleTelemetryData, setBattleTelemetryData] = useState(init);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    const instance = setInterval(() => {\n      fetch(\"http://127.0.0.1:3020/battletelemetry\", {\n        method: \"GET\"\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(\"Success:\", data);\n          setBattleTelemetryData(data.battletelemetry);\n        })\n        .catch((error) => {\n          console.error(\"Error:\", error);\n        });\n    }, 300);\n\n    return () => {\n      clearInterval(instance);\n    };\n  });\n\n  return (\n    <div className='container'>\n      {battleTelemetryData.map((el) => {\n        return (\n          <div className=\"driver-container\">\n            <div className='speedmeter-container'>\n              <div className='speedmeter'>\n                <span className='drs'>{el.drs ? \"DRS\" : \"\"}</span>\n                <span className='speed'>{el.speed ? el.speed : \"-\"}</span>\n                <span className='gear'>{el.gear ? el.gear : \"\"}</span>\n                <span className='ers'>\n                  ERS:\n                  {el.ersStoreEnergy\n                    ? Math.round(el.ersStoreEnergy / 40000)\n                    : \"-\"}\n                  %\n                </span>\n              </div>\n            </div>\n            <div className='tyreinfo-container'>\n              <span className='tyre'>\n                {el.visualTyreCompound ? el.visualTyreCompound : \"UNKNOWN\"}\n              </span>\n              <span className='tyrelap'>\n                {el.tyresAgeLaps ? el.tyresAgeLaps + \"Lap ago\" : \"No data\"}\n              </span>\n              <div className='tyredamage-container'>\n                <span\n                  className='fl'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[2] : 0))+\",100%,50%)\"\n                    }  }\n                >\n                  {el.tyresDamage ? el.tyresDamage[2] : \"-\"}\n                </span>\n                <span\n                  className='fr'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[3] : 0))+\",100%,50%)\"\n                  }}\n                >\n                  {el.tyresDamage ? el.tyresDamage[3] : \"-\"}\n                </span>\n                <span\n                  className='rl'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[0] : 0))+\",100%,50%)\"\n                  }}\n                >\n                  {el.tyresDamage ? el.tyresDamage[0] : \"-\"}\n                </span>\n                <span\n                  className='rr'\n                  style={{\n                    backgroundColor:\"hsl(\"+(100 - (el.tyresDamage ? el.tyresDamage[1] : 0))+\",100%,50%)\"\n                  }}\n                >\n                  {el.tyresDamage ? el.tyresDamage[1] : \"-\"}\n                </span>\n              </div>\n            </div>\n            <div className='driverinfo-container'>\n              <div className='position'>\n                {el.carPosition ? el.carPosition : \"-\"}\n              </div>\n              <div className={'team'+\" \" + el.teamName}>\n                {el.teamName ? el.teamName : \"UNKNOWN TEAM\"}\n              </div>\n\n              <div className='driver'>\n                <div className='carnumber'>\n                  {el.carNumber ? el.carNumber : \"-\"}\n                </div>\n                {el.driverName ? el.driverName : \"UNKNOWN DRIVER\"}\n              </div>\n              <div className='lastlap'>\n                {el.lastLapTime\n                  ? \"LASTLAP \" +\n                    (Math.floor(el.lastLapTime / 60) % 60) +\n                    \":\" +\n                    ( '00' + Math.floor(el.lastLapTime % 60)).slice(-2) +\n                    \":\" +\n                    ( '000' + Math.floor((el.lastLapTime * 1000) % 1000)).slice(-3)\n                  : \"LASTLAP NODATA\"}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      <div className='lapinfo-container'>\n        <div>\n          LAP{\" \"}\n          {battleTelemetryData[0]\n            ? battleTelemetryData[0].currentLapNumber\n            : \"-\"}\n          /\n          {battleTelemetryData[0]\n            ? battleTelemetryData[0].sessionFullLapNumber\n            : \"-\"}\n        </div>\n      </div>\n      <div className='distance-container'>\n        <div>DISTANCE</div>\n        <div>\n          {battleTelemetryData[1] && battleTelemetryData[1].distance\n            ? battleTelemetryData[1].distance / 1000\n            : \"+/-\"}\n        </div>\n      </div>\n      <div className='drszone-container'>\n        <div>DRSZone</div>\n        <div>\n          {battleTelemetryData[1] &&\n          battleTelemetryData[1].drsActivationDistance\n            ? Math.round(battleTelemetryData[1].drsActivationDistance)\n            : \"+/-\"}\n          m\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getDeltaTime(distance: number, speed: number): number {\n  // 現在の車速 / 3,600,000 = 1秒間に何m進むか[y]\n  // Distance m / y = 追いつくまでの秒数。\n  // 追いつくまでの秒数　×　1秒間に進む距離 = 離れている距離\n  const minuteMeter = (speed ? speed : 1) / 3600000;\n  const distanceMinute = distance / minuteMeter;\n  return Math.floor(distanceMinute / 1000) / 1000;\n  // return distanceMinute;\n}\n\nexport default BattleTelemetry;\n",["40","41"],"/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/TimeTable.tsx",[],"/mnt/d/Documents/F1-2020-Telemetly/client/src/pages/Live.tsx",["42","43","44","45"],"import React, { useEffect, useState,useRef } from \"react\";\nimport LiveTelemetryResponse from \"./../../../server/src/F12020-Telemetly/response/LiveTelemetry\";\nimport \"./Live.scss\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCar } from '@fortawesome/free-solid-svg-icons'\nimport TimeTableResponse from \"../../../server/src/F12020-Telemetly/response/TimeTable\";\n\n/**\n * フォームで動画ファイルを選択する。\n * videoのソースに指定する。\n */\nfunction Live() {\n  let init: LiveTelemetryResponse={};\n  const [liveTelemetryData, setLiveTelemetryData] = useState(init);\n  const [mode, setMode] = useState(\"load\");\n  const [url,setUrl] = useState(\"\");\n  const fileEl:React.MutableRefObject<any> = useRef(null);\n  const videoEl:React.MutableRefObject<any> = useRef(null);\n  const [instance,setInstance] = useState<any>();\n\n  const getData=()=>{\n    fetch(\"http://127.0.0.1:3020/live\", {\n      method: \"GET\"\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Success:\", data);\n        setLiveTelemetryData(data.data);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  }\n\n  useEffect(() => {\n    return function cleanup() {\n      // console.log(\"呼ばれている説\");\n      // URL.revokeObjectURL(url);\n      // window.clearInterval(instance)\n    };\n  });\n\n  const playMovie=()=>{\n    setMode(\"play\");\n    videoEl.current.play();\n    let interval = window.setInterval(getData, 500);\n    setInstance(interval);\n  }\n\n  const changeFile = (e:React.ChangeEvent<HTMLInputElement>)=>{\n    if(e&& e.target && e.target.files && e.target.files[0]){\n      let url = URL.createObjectURL(e.target.files[0]);\n      setUrl(url);\n      if(videoEl!==null && videoEl.current !== null){\n        videoEl.current.src = url;\n      }\n    }\n    else{\n      console.log(\"空っぽ\");\n    }\n  }\n\n  interface Tyre{tyrename:string,initial:string};\n\n\n  const tyreCheck = (num:string):Tyre=>{\n    switch(num){\n      case \"intermediate\": return {tyrename:\"intermediate\",initial:\"I\"};\n      case \"wet\": return {tyrename:\"wet\",initial:\"W\"}\n      case \"soft\":\n        return {tyrename:\"soft\",initial:\"S\"};\n      case \"medium\": return {tyrename:\"medium\",initial:\"M\"};\n      case \"hard\": return {tyrename:\"hard\",initial:\"H\"};\n      default: return {tyrename:\"unknown\",initial:\"U\"}\n    }\n  }\n\n  return (\n    <div className='container'>\n      <div className=\"overlay-lap-container\">\n        <div className=\"lap\">{liveTelemetryData.timetable?liveTelemetryData.timetable[0].currentLapNumber:1} / {liveTelemetryData.totalLap?liveTelemetryData.totalLap:1}</div>\n      </div>\n      {mode===\"play\"?(\n      <div className='overlay-container'>\n        <table className=\"ranktable\">\n          {/* <div className=\"safetycar\">\n          <FontAwesomeIcon icon={faCar} />\n          <span>VERTUAL SAFETY CAR</span>\n          </div> */}\n          <tbody>\n          {\n            liveTelemetryData&&liveTelemetryData.timetable?liveTelemetryData.timetable.map((el:TimeTableResponse)=>{\n              return (\n                <tr>\n                <td className={\"position\" + (el.isFastest?\" purple\":\"\")}>{el.carPosition?el.carPosition:null}</td>\n                <td className={\"team \"+ (el.teamName?el.teamName:\"\")}></td>\n                <td className=\"driver\">{el.driverName}</td>\n                <td className={\"tyre \"+ tyreCheck(el.visualTyreCompound?el.visualTyreCompound:\"0\").tyrename}>{tyreCheck(el.visualTyreCompound?el.visualTyreCompound:\"0\").initial}</td>\n                <td className=\"distance\">{el.distance?(Math.floor(el.distance/1000)%1000)+\".\"+('000' + (el.distance % 1000)).slice(-3):\"+/-\"}</td>\n              </tr>\n              )\n            }):null\n          }\n          </tbody>\n        </table>\n      </div>):null}\n      <video ref={videoEl} onCanPlayThrough={()=>playMovie()} preload=\"auto\" id=\"video\" width=\"100%\" controls></video>\n      <form>\n        <input ref={fileEl} type=\"file\" id=\"filename\" onChange={(e:React.ChangeEvent<HTMLInputElement>)=>{changeFile(e)}} />\n      </form>\n    </div>\n  );\n}\n\nexport default Live;",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":6,"column":5,"nodeType":"52","messageId":"53","endLine":6,"endColumn":9},{"ruleId":"54","severity":1,"message":"55","line":95,"column":37,"nodeType":"56","messageId":"57","endLine":95,"endColumn":38},{"ruleId":"50","severity":1,"message":"58","line":153,"column":10,"nodeType":"52","messageId":"53","endLine":153,"endColumn":22},{"ruleId":"46","replacedBy":"59"},{"ruleId":"48","replacedBy":"60"},{"ruleId":"50","severity":1,"message":"61","line":4,"column":10,"nodeType":"52","messageId":"53","endLine":4,"endColumn":25},{"ruleId":"50","severity":1,"message":"62","line":5,"column":10,"nodeType":"52","messageId":"53","endLine":5,"endColumn":15},{"ruleId":"50","severity":1,"message":"63","line":16,"column":10,"nodeType":"52","messageId":"53","endLine":16,"endColumn":13},{"ruleId":"50","severity":1,"message":"64","line":19,"column":10,"nodeType":"52","messageId":"53","endLine":19,"endColumn":18},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'getDeltaTime' is defined but never used.",["65"],["66"],"'FontAwesomeIcon' is defined but never used.","'faCar' is defined but never used.","'url' is assigned a value but never used.","'instance' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]